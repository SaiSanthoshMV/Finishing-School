Step-1: Compute in-degree (number of incoming edges) for each of the vertex present  
 in the DAG and initialize the count of visited nodes as 0. 
 
 Step-2: 
 Pick all the vertices with in-degree as 0 and add them into a queue (Enqueue operation) 
  
 Step-3: Remove a vertex from the queue (Dequeue operation) and then.  
  
 Increment the count of visited nodes by 1. 
 Decrease in-degree by 1 for all its neighbouring nodes. 
 If the in-degree of neighbouring nodes is reduced to zero, then add it to the queue. 
 
 Step 4: Repeat Step 3 until the queue is empty. 
 
 Step 5: If the count of visited nodes is not equal to the number of nodes in the  
 graph then the topological sort is not possible for the given graph.


 Step-1

 Compute in-degree (number of incoming edges) for each of the vertex present  
 in the DAG and initialize the count of visited nodes as 0.

 int indegree[] = new int[V]; 
 
  // Traverse adjacency lists to fill indegrees of vertices. This step takes O(V+E) time 

  for (int i = 0; i < V; i++)  
  { 
   ArrayList<Integer> temp = (ArrayList<Integer>)adj[i]; 
		for (int node : temp) 
		    indegree[node]++; 
  } 
 
  for (int i = 0; i < V; i++)  
     System.out.println("vertex " + i + " indegree " + indegree[i]); 
  

Step-2: 
 Pick all the vertices with in-degree as 0 and add them into a queue (Enqueue operation) 

 Queue<Integer> q = new LinkedList<Integer>(); 

  for (int i = 0; i < V; i++)  
  { 
   if (indegree[i] == 0) 
         q.add(i); 
  }


  Step-3: Remove a vertex from the queue (Dequeue operation) and then.  
  
 Increment the count of visited nodes by 1. 
 Decrease in-degree by 1 for all its neighbouring nodes. 
 If the in-degree of neighbouring nodes is reduced to zero, then add it to the queue. 


   int cnt = 0; 
 
  List<Integer> topOrder = new ArrayList<Integer>(); 
  // Create a list to store result (A topological ordering of the vertices) 
  
  while (!q.isEmpty())  
  { 
   // Extract front of queue (or perform dequeue)  and add it to topological order 
   int u = q.poll(); 
   System.out.println("Queue item " + u); 
   topOrder.add(u); 
 
   // Iterate through all its neighbouring nodes of  dequeued node u and decrease their in-degree by 1 
   
   for (int node : adj[u])  
   { 
    System.out.println("adjacent items " + node); 
	    if (--indegree[node] == 0) 
		q.add(node); 
   } 
   cnt++; 
  }


Step-4 : Repeat Step 3 until the queue is empty.



Step-5 :

 If the count of visited nodes is not equal to the number of nodes in the  
 graph then the topological sort is not possible for the given graph.
 else
 Print the Topological Order

if (cnt != V) { 
   System.out.println("There exists a cycle in the graph"); 
   return; 
  } 
 
  // Print topological order 
  for (int i : topOrder) 
   System.out.print(i + " "); 
  