Prepared Statement represents a recompiled SQL statement, that can be executed many times. 

This accepts parameterized SQL queries. 

In this, “?” is used instead of the parameter, one can pass the parameter dynamically 

by using the methods of PREPARED STATEMENT at run time.

Illustration: 

Considering in the people database if there is a need to INSERT some values, 
SQL statements such as these are used: 

INSERT INTO people VALUES ("Hari",11);
INSERT INTO people VALUES("Ram",34);

To do the same in Java, one may use Prepared Statements and set the values in the ? holders, 
setXXX() of a prepared statement is used as shown: 

String query = "INSERT INTO people(name, age)VALUES(?, ?)";
PrepareStatement pstmt = con.prepareStatement(query);
pstmt.setString(1,"Ayan");
ptstmt.setInt(2,25);
// where pstmt is an object name

Implementation: Once the PreparedStatement object is created, there are three ways to execute it: 

execute(): This returns a boolean value and executes a static SQL statement that is present in the prepared statement object.
executeQuery(): Returns a ResultSet from the current prepared statement.
executeUpdate(): Returns the number of rows affected by the DML statements 
such as INSERT, DELETE, and more that is present in the current Prepared Statement.

// Java Program illustrating Prepared Statement in JDBC

import java.sql.*;
import java.util.Scanner;

class Test {
public static void main(String[] args)
{
try {
	Class.forName("com.mysql.cj.jdbc.Driver");
	Scanner sc = new Scanner(System.in);
	int age = sc.nextInt();
	Connection con = DriverManager.getConnection("jdbc:mysql:///world", "root", "12345");
	// Step 4: Create a statement
	PreparedStatement ps = con.prepareStatement("select name from world.people where age = ?");
	// Step 5: Execute the query
	ps.setInt(1, age);
	ResultSet result = ps.executeQuery();
	// Step 6: Process the results
	while (result.next()) 
		System.out.println("Name : "+ result.getString(1));
}
catch (SQLException e) {
	System.out.println(e);
}
catch (ClassNotFoundException e) {
	e.printStackTrace();
	}
	}
}

20 
Name : Scott
Name : Dennis

Callable Statement are stored procedures which are a group of statements that we 
compile in the database for some task, 
they are beneficial when we are dealing with multiple tables with complex scenario & 
rather than sending multiple queries to the database, 
we can send the required data to the stored procedure & 
lower the logic executed in the database server itself. 

The Callable Statement interface provided by JDBC API helps in executing stored procedures.

Syntax: To prepare a CallableStatement

CallableStatement cstmt = con.prepareCall("{call Procedure_name(?, ?}");
Implementation: Once the callable statement object is created

execute() is used to perform the execution of the statement.

// Java Program illustrating Callable Statement in JDBC

import java.sql.*;

class Test {
public static void main(String[] args)
{
try {

	Class.forName("com.mysql.cj.jdbc.Driver");
	Connection con = DriverManager.getConnection("jdbc:mysql:///world", "root", "12345");
	Statement s = con.createStatement();
	CallableStatement cs= con.prepareCall("{call peopleinfo(?,?)}");
	cs.setString(1, "Bob");
	cs.setInt(2, 64);
	cs.execute();
	ResultSet result= s.executeQuery("select * from people");
	while (result.next()) {
		System.out.println("Name : "	+ result.getString(1));
		System.out.println("Age : "+ result.getInt(2));
	}
}
catch (SQLException e) {
	System.out.println(e);
}
catch (ClassNotFoundException e) {
	e.printStackTrace();
}
}
}