
// 20 MARCH


//1

/* Retrieve the names and salaries of employees who have the job title "SALESMAN" and earn more than 1500.

Expected Output Columns:
+------------+-----------+
| ename      | sal       |
+------------+-----------+

--database name is test
--write your query here
-- dpt emp salary

*/
USE test; 
select ename, sal from emp where job = "SALESMAN" and sal > 1500; 

//2

/* List all employees whose job title is either "MANAGER" or "ANALYST".

Expected Output Columns:
+------------+-----------+
| ename      | job       |
+------------+-----------+

-- database name is test
-- write your query here

*/
USE test; 
select ename, job from emp where job = "MANAGER" or job = "ANALYST";

//3

/* Get all the details of employees who do not belong to department 20.

*/
USE test;
select * from emp where deptno != 20;


//4


/* Get the employee names and their commission details 
where the job is "CLERK" or the commission is more than 1000.

Expected Output Columns:
+--------+----------+---------+
| ename  | job      | comm    |
+--------+----------+---------+

*/
USE test;
select ename, job, comm from emp where job = "CLERK" or comm > 1000;



//5

/* Get the list of employees who do not have the job title "CLERK" or "SALESMAN".

Expected Output Columns:
+--------+----------+
| ename  | job      |
+--------+----------+

*/
USE test;
select ename, job from emp where job not in ("CLERK","SALESMAN");



//6

/* Retrieve the names and salaries of employees who earn between 1000 and 3000 (inclusive).

Expected Output Columns:
+--------+----------+
| ename  | sal      |
+--------+----------+

*/
USE test;
SELECT ename ,sal from emp where sal between 1000 and 3000;

//7

/* Retrieve employees who were hired between the years 1995 and 1999.

Expected Output Columns:
+--------+----------+
| ename  | hiredate |
+--------+----------+

*/
USE test;
select ename , hiredate from emp where year(hiredate) between 1995 and 1999;

//8


/* Retrieve employees who earn a commission between 300 and 1000.

Expected Output Columns:
+--------+----------+
| ename  | comm     |
+--------+----------+

*/
USE test;
select ename , comm from emp where comm between 300 and 1000;


//9

/* Retrieve employees who are part of department numbers between 20 and 40.

Expected Output Columns:
+--------+----------+
| ename  | deptno   |
+--------+----------+

*/
USE test;
select ename, deptno from emp where deptno between 20 and 40;


//10

/* List all salary grades where the grade is between 2 and 4.

Expected Output Columns:
+------+----------+------------+
|grade |    losal |   hisal    |
+------+----------+------------+

*/
USE test;
select grade, losal, hisal from salgrade where grade between 2 and 4;


//11

/* Get employees who are not managers and have a salary below 2000.

Expected Output Columns:
+------+----------+------------+
|ename |    job   |   sal      |
+------+----------+------------+

*/
USE test;
select ename, job, sal from emp where job != "MANAGER" AND sal < 2000;

//12

/* Retrieve employees who do not report to any manager.

Expected Output Columns:
+------+----------+------------+
|ename |    job   |   mgr      |
+------+----------+------------+

*/
USE test;
select ename, job, mgr from emp where mgr is null;

//13

/* Get clerks or analysts hired between 1996 and 2000

Expected Output Columns:
+------+-------+------------+
| ID   | Name  | StartDate  |
+------+-------+------------+

*/
USE test;
select empno as ID, ename as Name , hiredate as StartDate from emp where job in ("CLERK", "ANALYST") AND year(hiredate) between 1996 and 2000;

//14

/* List employees with mgr 7788 or 7566 and sal < 3000

Expected Output Columns:
+----------+------+---------+
| Employee | Boss | Salary  |
+----------+------+---------+

*/
USE test;

SELECT ename as Employee , mgr as Boss, sal as Salary from emp where mgr in (7788, 7566) and sal < 3000;


//15

/* Retrieve employees with 'ar' anywhere in their name

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;
select * from emp where ename like "%ar%";



//16


/* Retrieve employees with exactly 5-letter names starting with 'K'.

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;
select * from emp where ename like "k____";


//17

/* Retrieve employees whose names do not end with 'n'.

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;
select * from emp where ename not like "%n";


//18


/* Retrieve which employees have names starting with 'C' or 'S'.

Expected Output Columns:
+-------+--------+----------+------+------------+---------+---------+--------+
| empno | ename  | job      | mgr  | hiredate   | sal     | comm    | deptno |
+-------+--------+----------+------+------------+---------+---------+--------+

*/
USE test;
select * from emp where ename like "c%" or ename like "s%";


//19


/* Perform Sum of salaries and commissions by dept 30 

Expected Output Columns:
+----------+------------+
| TotalPay | TotalBonus |
+----------+------------+

*/
USE test;
select sum(sal) as TotalPay , sum(comm) as TotalBonus
from emp 
where deptno = 30;


//20


/* Get Max and min salaries in dept 20 or 40

Expected Output Columns:
+------------+-----------+
| HighestPay | LowestPay |
+------------+-----------+

*/
USE test;
select max(sal) as HighestPay , min(sal) as LowestPay from emp where deptno in (20, 40);



//21

/* Find employees who earn more than the average salary of all employees.

Expected Output Columns:
------------------------
+-------+---------+
| ename | sal     |
+-------+---------+

*/
USE test;
select ename , sal from emp where sal > (select avg(sal) from emp)


//22

/* Find the name and salary of the highest-paid employee.

Expected Output Columns:
------------------------
+-------+---------+
| ename | sal     |
+-------+---------+

*/
USE test;
select ename, sal from emp where sal = (select max(sal) from emp)

//23

/* Find employees who earn more than the highest-paid employee in department 10.

Expected Output Columns:
------------------------
+-------+---------+--------+
| ename | sal     | deptno |
+-------+---------+--------+

*/
USE test;
select ename, sal, deptno from emp where sal > (select max(sal) from emp where deptno = 10)


//24

/* Find employees whose salary is higher than the salary of ‘SCOTT’.

Expected Output Columns:
------------------------
+-------+---------+
| ename | sal     |
+-------+---------+

*/
USE test;
select ename , sal from emp where sal > (select sal from emp where ename = 'SCOTT')

//25

/* Find employee who have the same job title as 'FORD'.

Expected Output Columns:
------------------------
+-------+---------+
| ename | job     |
+-------+---------+

*/
USE test;
select ename, job from emp where job in (select job from emp where ename = 'FORD')

//26

/* Find departments that have at least one employee earning more than 3000.

Expected Output Columns:
------------------------
+--------+------------+
| deptno | dname      |
+--------+------------+

*/
USE test;
select d.deptno, d.dname from dept d 
left join emp e on e.deptno = d.deptno
where e.sal > 3000

//27

/* Find employees who were hired before all employees in department 30.

Expected Output Columns:
------------------------
+-------+------------+
| ename | hiredate   |
+-------+------------+

*/
USE test;
select ename, hiredate from emp where hiredate < (select min(hiredate) from emp where deptno = 30)

//28

/* Find employees who belong to departments located in 'Dallas'.

Expected Output Columns:
------------------------
+-------+--------+
| ename | deptno |
+-------+--------+

*/
USE test;
select ename, deptno from emp where deptno = (select deptno from dept where location = "Dallas")
-- 

//29

/* Find the second highest salary from employees.

Expected Output Columns:
------------------------
+-----------------------+
| second_highest_salary |
+-----------------------+

*/
USE test;
SELECT max(sal) as second_highest_salary from emp where sal < (select max(sal) from emp)

//30

/* Find employees who have the same manager as ‘BLAKE’.

Expected Output Columns:
------------------------
+-------+------+
| ename | mgr  |
+-------+------+

*/
USE test;
select ename, mgr from emp where mgr in (select mgr from emp where ename = "BLAKE") and ename != 'BLAKE'

//31

/* Find employees who belong to a department with no employees.

Expected Output Columns:
------------------------
+---------+
| dname   |
+---------+

*/
USE test;

select d.dname from dept d
left join emp e on d.deptno = e.deptno where e.ename is null

//32

/* Find the department that has the most employees.

Expected Output Columns:
------------------------
+--------+----------------+
| deptno | employee_count |
+--------+----------------+

*/
USE test;
select deptno, count(empno) as employee_count
from emp
group by deptno order by employee_count desc limit 1;

//33

/* Find the department name where ‘JONES’ works.

Expected Output Columns:
------------------------
+----------+
| dname    |
+----------+

*/
USE test;
select dname from dept
where deptno = (select deptno from emp where ename = "JONES")

//34

/* Write a SQL query to find employees whose name contains ‘A’.

Expected Output Columns:
------------------------
+--------+-------+
| ename  | empno |
+--------+-------+

*/
USE test;
select ename, empno from emp where ename like "%A%"

//35

/* Retrieve employees who have a commission greater than their salary.

Expected Output Columns:
------------------------
+--------+-------+---------+---------+
| ename  | empno | sal     | comm    |
+--------+-------+---------+---------+

*/
USE test;
select ename, empno, sal, comm from emp where comm > sal

//36

/* Write a SQL query to find all employees who do not receive a commission.

Expected Output Columns:
------------------------
+-------+-------+------+
| ename | empno | comm |
+-------+-------+------+

*/
USE test;
select ename, empno, comm from emp where comm  = 0 or comm is null

//37

/* Write a SQL query to count the number of employees who have a manager.

Expected Output Columns:
------------------------
+------------------------+
| employees_with_manager |
+------------------------+

*/
USE test;
select count(ename) as employees_with_manager from emp where mgr is not null or mgr != 0

//38

/* Write a SQL query to find the difference between the highest and second highest salary.

Expected Output Columns:
------------------------
+-------------------+
| salary_difference |
+-------------------+

*/
USE test;
select max(sal) - (select max(sal) from emp where sal < (select max(sal) from emp)) as salary_difference from emp

//39

/* Write a SQL query to calculate the total salary and total commission for all employees.

Expected Output Columns:
------------------------
+--------------+------------------+
| Total Salary | Total Commission |
+--------------+------------------+

*/
USE test;
select sum(sal) as Total_Salary , sum(comm) as Total_Commission from emp 

//40

/* Write a SQL query to calculate the average salary and average commission of employees.

Expected Output Columns:
------------------------
+----------------+--------------------+
| Average Salary | Average Commission |
+----------------+--------------------+

*/
USE test;
select avg(sal) as Average_Salary , avg(comm) as Average_Commission from emp




//41

/* Write a SQL query to calculate the average salary of employees with a commission.

Expected Output Columns:
------------------------
+----------------------+
| avg_salary_with_comm |
+----------------------+

*/
USE test;
select avg(sal) as avg_salary_with_comm from emp where comm is not null;

//42

/* Write a SQL query to determine the minimum commission value, excluding NULLs.

Expected Output Columns:
------------------------
+----------------+
| min_commission |
+----------------+

*/
USE test;
select min(comm) as min_commission from emp where comm is not null;

//43

/* Write a SQL query to find the total commission paid to employees hired after 1995.

Expected Output Columns:
------------------------
+----------------------+
| total_comm_post_1995 |
+----------------------+

*/
USE test;
select sum(comm) as total_comm_post_1995 from emp where year(hiredate) > 1995;

//44

/* Write a SQL query to find the maximum hire date (latest hire) in the emp table.

Expected Output Columns:
------------------------
+-------------+
| latest_hire |
+-------------+

*/
USE test;
select max(hiredate) as latest_hire from emp ;

//45

/* Write a SQL query to find the average commission for salesmen, excluding NULLs.

Expected Output Columns:
------------------------
+-------------------+
| avg_salesman_comm |
+-------------------+

*/
USE test;
select avg(comm) as avg_salesman_comm from emp where job = "salesman" and comm is not null;


//46

/* Write a SQL query to determine the minimum salary for employees hired in the 1990s.

Expected Output Columns:
------------------------
+----------------+
| min_salary_90s |
+----------------+

*/
USE test;
select min(sal) as min_salary_90s from emp where year(hiredate) >= 1990 and year(hiredate) <= 1999;

//47

/* Write a SQL query to find the total salary of employees whose names start with 'K'.

Expected Output Columns:
------------------------
+----------------+
| total_salary_k |
+----------------+

*/
USE test;
select sum(sal) as total_salary_k from emp where ename like "K%";

//48

/* Write a SQL query to count the number of employees hired in each year.

Expected Output Columns:
------------------------
+-----------+----------------+
| hire_year | hires_per_year |
+-----------+----------------+

*/
USE test;
select year(hiredate) as hire_year, count(*) as hires_per_year from emp group by hire_year;

//49

/* Write a SQL query to sum the commissions for employees with salaries below 1500.

Expected Output Columns:
------------------------
+-----------------------+
| total_comm_low_salary |
+-----------------------+

*/
USE test;
select sum(comm) as total_comm_low_salary from emp where sal < 1500;

//50

/* List employees who do not receive a commission but earn more than 2500.

Expected Output Columns:
------------------------
+-------+---------+------+
| ename | sal     | comm |
+-------+---------+------+

*/
USE test;
select ename , sal, comm from emp where comm is null and sal > 2500;

//51

/* Write a SQL query to list employee names and department names for employees 
with a salary greater than 2000.


+-------+------------+
| ename | dname      |
+-------+------------+
*/
USE test; 
select e.ename, d.dname from emp e join dept d on d.deptno = e.deptno where sal > 2000;

//52

/*Write a SQL query to retrieve all employees and their department locations, 
including those without departments.

+--------+----------+
| ename  | location |
+--------+----------+
*/
USE test; 
select e.ename, d.location from emp e left join dept d on d.deptno = e.deptno 

//53

/* Write a SQL query to list all department numbers, department names and their 
employee counts, including departments with no employees.

+--------+------------+-----------+
| deptno | dname      | emp_count |
+--------+------------+-----------+
*/

USE test;
select d.deptno, d.dname, count(e.ename) as emp_count from emp e right join dept d on d.deptno = e.deptno group by deptno;

//54

/* Write a SQL query to simulate a FULL OUTER JOIN to list all employees and 
departments, including unmatched rows.

+-------+--------+--------+------------+
| empno | ename  | deptno | dname      |
+-------+--------+--------+------------+
*/
USE test; 
select e.empno , e.ename , d.deptno, d.dname from emp e left join dept d on d.deptno = e.deptno
union
select e.empno , e.ename , d.deptno, d.dname from emp e right join dept d on d.deptno = e.deptno
;

//55

/* Write a SQL query to find employees who are managers of other employees.

+---------+
| manager |
+---------+
*/

USE test; 
select distinct e2.ename as manager from emp e1 join emp e2 on e1.mgr=e2.empno;

//56

/*Write a SQL query to generate all possible employee-department combinations.
+--------+------------+
| ename  | dname      |
+--------+------------+
*/
USE test;
select e.ename,d.dname from emp e cross join dept d;

//57

/*Write a SQL query to find managers and the number of employees they manage in
departments located in 'New York', using the primary key and foreign key 
constraints.

+--------------+-----------+
| manager_name | emp_count |
+--------------+-----------+
*/
USE test; 
select e1.ename as 'manager_name', count(e2.empno) as emp_count from emp e1 
join emp e2 on e1.empno=e2.mgr 
join dept d on e1.deptno=d.deptno
where d.location='New York' group by e1.ename,e1.empno;

//58

/* Write a SQL query to list all employees and departments, including those 
without matches, using a simulated FULL JOIN.


+-------+--------+--------+------------+----------+
| empno | ename  | deptno | dname      | location |
+-------+--------+--------+------------+----------+
*/
USE test; 
select e.empno, e.ename , d.deptno, d.dname, d.location from emp e left join dept d on d.deptno = e.deptno
union
select e.empno, e.ename , d.deptno, d.dname, d.location from emp e right join dept d on d.deptno = e.deptno
;

//59
/* Write a SQL query to list employee names and department names where the 
department is in 'Chicago'.

+-------+-------+
| ename | dname |
+-------+-------+
*/
USE test; 
select e.ename, d.dname from emp e join dept d on e.deptno = d.deptno where d.location = "Chicago";

//60

/*Retrieve Department-wise Total Salary and Number of Employees 


+------------+---------------+--------------+
| dname      | num_employees | total_salary |
+------------+---------------+--------------+

*/
USE test;

select d.dname,count(e.ename) as num_employees, sum(e.sal) as total_salary from dept d left join emp e on d.deptno=e.deptno group by d.deptno;


